plugins {
	id 'java'
	id 'maven-publish'

	id 'idea'
	id 'eclipse'
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

archivesBaseName = "fabric-loader"

// Fetch build number from Jenkins
def ENV = System.getenv()
version = version + (ENV.GITHUB_ACTIONS ? "" : "+local")

repositories {
	mavenCentral()
	jcenter()
	maven {
		name = 'Fabric'
		url = 'https://maven.fabricmc.net/'
	}
	maven {
		name = 'mojang'
		url = 'https://libraries.minecraft.net/'
	}
	flatDir {
		dir "libs"
	}
}

dependencies {

	implementation files('libs/delver.jar')

	// fabric-loader dependencies
	compile group: 'org.apache.logging.log4j', name: 'log4j-api', version: '2.14.0'
	compile group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.14.0'

	implementation "org.ow2.asm:asm:${project.asm_version}"
	implementation "org.ow2.asm:asm-analysis:${project.asm_version}"
	implementation "org.ow2.asm:asm-commons:${project.asm_version}"
	implementation "org.ow2.asm:asm-tree:${project.asm_version}"
	implementation "org.ow2.asm:asm-util:${project.asm_version}"

	// Required for mixin annotation processor
	annotationProcessor "org.ow2.asm:asm:${project.asm_version}"
	annotationProcessor "org.ow2.asm:asm-analysis:${project.asm_version}"
	annotationProcessor "org.ow2.asm:asm-commons:${project.asm_version}"
	annotationProcessor "org.ow2.asm:asm-tree:${project.asm_version}"
	annotationProcessor "org.ow2.asm:asm-util:${project.asm_version}"

	implementation('net.fabricmc:sponge-mixin:0.8.2+build.24')
	implementation 'net.fabricmc:tiny-mappings-parser:0.2.2.14'
	implementation 'net.fabricmc:tiny-remapper:0.3.0.70'
	implementation 'net.fabricmc:access-widener:1.0.0'

	implementation 'com.google.jimfs:jimfs:1.2-fabric'
	implementation 'net.fabricmc:fabric-loader-sat4j:2.3.5.4'

	// launchwrapper + dependencies
	implementation ('net.minecraft:launchwrapper:1.12') {
		transitive = false
	}
	implementation 'net.sf.jopt-simple:jopt-simple:5.0.3'

	testCompileOnly 'org.jetbrains:annotations:19.0.0'

	// Unit testing for mod metadata
	testImplementation('org.junit.jupiter:junit-jupiter:5.6.2')
}

processResources {
	inputs.property "version", project.version

	filesMatching("fabric.mod.json") {
		expand "version": project.version
	}
}

jar {
	manifest {
		attributes (
			'Main-Class': 'net.fabricmc.loader.launch.server.FabricServerLauncher'
		)
	}
}

// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
// if it is present.
// If you remove this task, sources will not be generated.
task sourcesJar(type: Jar, dependsOn: classes) {
	classifier = 'sources'
	from sourceSets.main.allSource
}

apply from: 'https://github.com/FabricMC/fabric-docs/raw/master/gradle/license.gradle'
apply from: 'https://github.com/FabricMC/fabric-docs/raw/master/gradle/ideconfig.gradle'

// A task to ensure that the version being released has not already been released.
task checkVersion {
	doFirst {
		def xml = new URL("https://maven.fabricmc.net/net/fabricmc/fabric-loader/maven-metadata.xml").text
		def metadata = new XmlSlurper().parseText(xml)
		def versions = metadata.versioning.versions.version*.text();
		if (versions.contains(version)) {
			throw new RuntimeException("${version} has already been released!")
		}
	}
}

publish.mustRunAfter checkVersion